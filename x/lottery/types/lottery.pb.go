// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lottery/lottery.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lottery struct {
	Index             string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	MaxNumber         int64       `protobuf:"varint,2,opt,name=maxNumber,proto3" json:"maxNumber,omitempty"`
	WinningNumber     int64       `protobuf:"varint,3,opt,name=winningNumber,proto3" json:"winningNumber,omitempty"`
	Status            int64       `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Price             *types.Coin `protobuf:"bytes,5,opt,name=price,proto3" json:"price,omitempty"`
	AccumulatedAmount *types.Coin `protobuf:"bytes,6,opt,name=accumulatedAmount,proto3" json:"accumulatedAmount,omitempty"`
}

func (m *Lottery) Reset()         { *m = Lottery{} }
func (m *Lottery) String() string { return proto.CompactTextString(m) }
func (*Lottery) ProtoMessage()    {}
func (*Lottery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2b8635f78dae0e2, []int{0}
}
func (m *Lottery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lottery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lottery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lottery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lottery.Merge(m, src)
}
func (m *Lottery) XXX_Size() int {
	return m.Size()
}
func (m *Lottery) XXX_DiscardUnknown() {
	xxx_messageInfo_Lottery.DiscardUnknown(m)
}

var xxx_messageInfo_Lottery proto.InternalMessageInfo

func (m *Lottery) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Lottery) GetMaxNumber() int64 {
	if m != nil {
		return m.MaxNumber
	}
	return 0
}

func (m *Lottery) GetWinningNumber() int64 {
	if m != nil {
		return m.WinningNumber
	}
	return 0
}

func (m *Lottery) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Lottery) GetPrice() *types.Coin {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Lottery) GetAccumulatedAmount() *types.Coin {
	if m != nil {
		return m.AccumulatedAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*Lottery)(nil), "tokenism30924.lottery.lottery.Lottery")
}

func init() { proto.RegisterFile("lottery/lottery.proto", fileDescriptor_e2b8635f78dae0e2) }

var fileDescriptor_e2b8635f78dae0e2 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x3d, 0x4b, 0x03, 0x31,
	0x18, 0xc7, 0x1b, 0x6b, 0x2b, 0x8d, 0x38, 0x18, 0xaa, 0x9e, 0x45, 0x43, 0x11, 0x87, 0x4e, 0xb9,
	0xbe, 0xb8, 0x38, 0xaa, 0x83, 0x20, 0xe2, 0xd0, 0xd1, 0x45, 0x72, 0x69, 0x38, 0x83, 0x4d, 0x9e,
	0x72, 0x49, 0xb4, 0xfd, 0x16, 0x7e, 0x2c, 0xc7, 0x8e, 0x8e, 0x72, 0xf7, 0x19, 0xdc, 0xc5, 0xcb,
	0x55, 0x29, 0x0e, 0x4e, 0xcf, 0xcb, 0xff, 0xf7, 0x83, 0xf0, 0x04, 0xef, 0x4d, 0xc1, 0x39, 0x99,
	0x2d, 0xe2, 0xaa, 0xb2, 0x59, 0x06, 0x0e, 0xc8, 0xb1, 0x83, 0x27, 0x69, 0x94, 0xd5, 0xa3, 0xfe,
	0xf9, 0xf0, 0x8c, 0xad, 0xc2, 0xaa, 0x76, 0xda, 0x29, 0xa4, 0x50, 0x92, 0xf1, 0x77, 0x17, 0xa4,
	0xce, 0x81, 0x00, 0xab, 0xc1, 0x3e, 0x84, 0x40, 0x80, 0x32, 0x21, 0x38, 0xf9, 0x44, 0x78, 0xeb,
	0x36, 0xa8, 0xa4, 0x8d, 0x1b, 0xca, 0x4c, 0xe4, 0x3c, 0x42, 0x5d, 0xd4, 0x6b, 0x8d, 0xc3, 0x40,
	0x8e, 0x70, 0x4b, 0xf3, 0xf9, 0x9d, 0xd7, 0x89, 0xcc, 0xa2, 0x8d, 0x2e, 0xea, 0xd5, 0xc7, 0xbf,
	0x0b, 0x72, 0x8a, 0x77, 0x5e, 0x94, 0x31, 0xca, 0xa4, 0x15, 0x51, 0x2f, 0x89, 0xf5, 0x25, 0xd9,
	0xc7, 0x4d, 0xeb, 0xb8, 0xf3, 0x36, 0xda, 0x2c, 0xe3, 0x6a, 0x22, 0x31, 0x6e, 0xcc, 0x32, 0x25,
	0x64, 0xd4, 0xe8, 0xa2, 0xde, 0xf6, 0xf0, 0x90, 0x85, 0x67, 0xb2, 0x84, 0x5b, 0xc9, 0x9e, 0x07,
	0x89, 0x74, 0x7c, 0xc0, 0xae, 0x40, 0x99, 0x71, 0xe0, 0xc8, 0x35, 0xde, 0xe5, 0x42, 0x78, 0xed,
	0xa7, 0xdc, 0xc9, 0xc9, 0x85, 0x06, 0x6f, 0x5c, 0xd4, 0xfc, 0x4f, 0xfe, 0xeb, 0x5c, 0xde, 0xbc,
	0xe5, 0x14, 0x2d, 0x73, 0x8a, 0x3e, 0x72, 0x8a, 0x5e, 0x0b, 0x5a, 0x5b, 0x16, 0xb4, 0xf6, 0x5e,
	0xd0, 0xda, 0x7d, 0x3f, 0x55, 0xee, 0xd1, 0x27, 0x4c, 0x80, 0x8e, 0xd7, 0x4e, 0xbd, 0xfa, 0x87,
	0x78, 0xfe, 0xd3, 0xb9, 0xc5, 0x4c, 0xda, 0xa4, 0x59, 0x9e, 0x72, 0xf4, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x2e, 0xa0, 0x1c, 0x04, 0xb1, 0x01, 0x00, 0x00,
}

func (m *Lottery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lottery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lottery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccumulatedAmount != nil {
		{
			size, err := m.AccumulatedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLottery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Price != nil {
		{
			size, err := m.Price.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLottery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.WinningNumber != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.WinningNumber))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxNumber != 0 {
		i = encodeVarintLottery(dAtA, i, uint64(m.MaxNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintLottery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLottery(dAtA []byte, offset int, v uint64) int {
	offset -= sovLottery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lottery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.MaxNumber != 0 {
		n += 1 + sovLottery(uint64(m.MaxNumber))
	}
	if m.WinningNumber != 0 {
		n += 1 + sovLottery(uint64(m.WinningNumber))
	}
	if m.Status != 0 {
		n += 1 + sovLottery(uint64(m.Status))
	}
	if m.Price != nil {
		l = m.Price.Size()
		n += 1 + l + sovLottery(uint64(l))
	}
	if m.AccumulatedAmount != nil {
		l = m.AccumulatedAmount.Size()
		n += 1 + l + sovLottery(uint64(l))
	}
	return n
}

func sovLottery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLottery(x uint64) (n int) {
	return sovLottery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lottery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lottery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lottery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNumber", wireType)
			}
			m.MaxNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningNumber", wireType)
			}
			m.WinningNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WinningNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Price == nil {
				m.Price = &types.Coin{}
			}
			if err := m.Price.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLottery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLottery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccumulatedAmount == nil {
				m.AccumulatedAmount = &types.Coin{}
			}
			if err := m.AccumulatedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLottery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLottery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLottery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLottery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLottery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLottery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLottery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLottery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLottery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLottery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLottery = fmt.Errorf("proto: unexpected end of group")
)
